@page "/translate"
@using System.ComponentModel.DataAnnotations
@inject TranslateApp.TranslationService TranslateService
@using TranslateApp
@using System.Text.Json
@inject HttpClient Http
...

<h1 class="
    ">
    Translate your Language
</h1>

<EditForm Model="TranslationInput" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <img src="image/la.jpeg" />
        <br /><br />
        <label for="textToTranslate">Text to Translate:</label>
        <InputTextArea id="textToTranslate" @bind-Value="TranslationInput.TextToTranslate" class="form-control" />
    </div>
    <br />
    <div class="form-group">
        <label for="targetLanguage">Target Language:</label>
        <br>
        <InputSelect id="targetLanguage" @bind-Value="TranslationInput.TargetLanguage" class="form-control">

            <option value="en">English</option>
            <option value="es">Spanish</option>
            <option value="fr">French</option>
            <option value="de">German</option>
            <option value="it">Italian</option>
            <option value="pt">Portuguese</option>
            <option value="pt">Portuguese</option>
            <option value="ru">Russian</option>
            <option value="zh">Chinese</option>
            <option value="ja">Japanese</option>
            <option value="ko">Korean</option>
            <option value="ar">Arabic</option>
            <option value="hi">Hindi</option>
            <option value="ms">Malay</option>
            <option value="fa">Persian</option>
            <option value="sw">Swahili</option>
            <option value="tr">Turkish</option>
            <option value="vi">Vietnamese</option>
            <option value="el">Greek</option>


        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-warning text-white">Translate</button>
    <br />
    <NavLink class="btn btn-warning mt-3 text-white" href="/">Go Back</NavLink>
</EditForm>

// If the TranslationResult is not null or empty, display it in a div
@if (!string.IsNullOrEmpty(TranslationResult))
{
    <div class="alert alert-success mt-3">
        <strong>Translation Result:</strong> @TranslationResult
    </div>
}

@code {
    // Initialize a new TranslationInputModel
    private TranslationInputModel TranslationInput = new TranslationInputModel();

    // The result of the translation
    private string? TranslationResult;

    // This class represents a language with a code and a name
    public class Language
    {
        public string? Code { get; set; }
        public string? Name { get; set; }
    }

    // This method is called when the form is submitted and the input is valid
    private async Task HandleValidSubmit()
    {
        // Call the TranslateTextAsync method of the TranslateService
        // Pass the text to translate, "auto" for the source language, and the target language
        TranslationResult = await TranslateService.TranslateTextAsync(TranslationInput.TextToTranslate, "auto", TranslationInput.TargetLanguage);

        // Notify Blazor that the state has changed and the UI needs to be updated
        StateHasChanged();
    }
}


