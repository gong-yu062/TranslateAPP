@page "/"
@using System.ComponentModel.DataAnnotations
@inject TranslateApp.TranslationService TranslateService
@using TranslateApp
@using System.Text.Json
@inject HttpClient Http


<h1 class="
    ">
    Translate your Language
</h1>

<EditForm Model="TranslationInput" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <img src="image/la.jpeg" />
        <br /><br />
        <label for="textToTranslate">Text to Translate:</label>
        <InputTextArea id="textToTranslate" @bind-Value="TranslationInput.TextToTranslate" @oninput="HandleValidSubmit" class="form-control" />

    </div>
    <br />
    <div class="form-group">
        <label for="targetLanguage">Target Language:</label>
        <br>
        <InputSelect id="targetLanguage" @bind-Value="TranslationInput.TargetLanguage" class="form-control">
            @foreach (var language in filteredLanguages.OrderBy(l => l.Name))
                {
                <option value="@language.Code">@language.Name</option>
                }


        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-warning text-white">Translate</button>
    <br><br>
    <button type="button" class="btn btn-warning text-white"  @onclick="ClearResultsAsync">Clear Results</button>
</EditForm>


@if (!string.IsNullOrEmpty(TranslationResult)) // If the TranslationResult is not null or empty, display it in a div
{
    <div class="alert alert-success mt-3">
        <strong>Translation Result:</strong> @TranslationResult
    </div>
}

@code {
    private TranslationInputModel TranslationInput = new TranslationInputModel();
    private string? TranslationResult;
    private string searchTerm = string.Empty;

    public class Language
    {
        public string? Code { get; set; }
        public string? Name { get; set; }
    }

    private List<Language> allLanguages = new List<Language>
{
        new Language { Code = "ca", Name = "Catalan" },
        new Language { Code = "ceb", Name = "Cebuano" },
        new Language { Code = "ny", Name = "Chichewa" },
        new Language { Code = "zh-CN", Name = "Chinese (Simplified)" },
        new Language { Code = "zh-TW", Name = "Chinese (Traditional)" },
        new Language { Code = "co", Name = "Corsican" },
        new Language { Code = "hr", Name = "Croatian" },
        new Language { Code = "cs", Name = "Czech" },
        new Language { Code = "da", Name = "Danish" },
        new Language { Code = "dv", Name = "Dhivehi" },
        new Language { Code = "doi", Name = "Dogri" },
        new Language { Code = "nl", Name = "Dutch" },
        new Language { Code = "en", Name = "English" },
        new Language { Code = "eo", Name = "Esperanto" },
        new Language { Code = "et", Name = "Estonian" },
        new Language { Code = "ee", Name = "Ewe" },
        new Language { Code = "tl", Name = "Filipino" },
        new Language { Code = "fi", Name = "Finnish" },
        new Language { Code = "fr", Name = "French" },
        new Language { Code = "fy", Name = "Frisian" },
        new Language { Code = "gl", Name = "Galician" },
        new Language { Code = "ka", Name = "Georgian" },
        new Language { Code = "de", Name = "German" },
        new Language { Code = "el", Name = "Greek" },
        new Language { Code = "gn", Name = "Guarani" },
        new Language { Code = "gu", Name = "Gujarati" },
        new Language { Code = "ht", Name = "Haitian Creole" },
        new Language { Code = "ha", Name = "Hausa" },
        new Language { Code = "haw", Name = "Hawaiian" },
        new Language { Code = "he", Name = "Hebrew" },
        new Language { Code = "hi", Name = "Hindi" },
        new Language { Code = "hmn", Name = "Hmong" },
        new Language { Code = "hu", Name = "Hungarian" },
        new Language { Code = "is", Name = "Icelandic" },
        new Language { Code = "ig", Name = "Igbo" },
        new Language { Code = "ilo", Name = "Ilocano" },
        new Language { Code = "id", Name = "Indonesian" },
        new Language { Code = "ga", Name = "Irish" },
        new Language { Code = "it", Name = "Italian" },
        new Language { Code = "ja", Name = "Japanese" },
        new Language { Code = "jv", Name = "Javanese" },
        new Language { Code = "kn", Name = "Kannada" },
        new Language { Code = "kk", Name = "Kazakh" },
        new Language { Code = "km", Name = "Khmer" },
        new Language { Code = "rw", Name = "Kinyarwanda" },
        new Language { Code = "kok", Name = "Konkani" },
        new Language { Code = "ko", Name = "Korean" },
        new Language { Code = "kri", Name = "Krio" },
        new Language { Code = "ku", Name = "Kurdish (Kurmanji)" },
        new Language { Code = "ckb", Name = "Kurdish (Sorani)" },
        new Language { Code = "ky", Name = "Kyrgyz" },
        new Language { Code = "lo", Name = "Lao" },
        new Language { Code = "la", Name = "Latin" },
        new Language { Code = "lv", Name = "Latvian" },
        new Language { Code = "ln", Name = "Lingala" },
        new Language { Code = "lt", Name = "Lithuanian" },
        new Language { Code = "lg", Name = "Luganda" },
        new Language { Code = "lb", Name = "Luxembourgish" },
        new Language { Code = "mk", Name = "Macedonian" },
        new Language { Code = "mai", Name = "Maithili" },
        new Language { Code = "mg", Name = "Malagasy" },
        new Language { Code = "ms", Name = "Malay" },
        new Language { Code = "ml", Name = "Malayalam" },
        new Language { Code = "mt", Name = "Maltese" },
        new Language { Code = "mi", Name = "Maori" },
        new Language { Code = "mr", Name = "Marathi" },
        new Language { Code = "mni", Name = "Meiteilon (Manipuri)" },
        new Language { Code = "lus", Name = "Mizo" },
        new Language { Code = "mn", Name = "Mongolian" },
        new Language { Code = "my", Name = "Myanmar (Burmese)" },
        new Language { Code = "ne", Name = "Nepali" },
        new Language { Code = "no", Name = "Norwegian" },
        new Language { Code = "or", Name = "Odia (Oriya)" },
        new Language { Code = "om", Name = "Oromo" },
        new Language { Code = "ps", Name = "Pashto" },
        new Language { Code = "fa", Name = "Persian" },
        new Language { Code = "pl", Name = "Polish"},
        new Language { Code = "af", Name = "Afrikaans" },
        new Language { Code = "sq", Name = "Albanian" },
        new Language { Code = "am", Name = "Amharic" },
        new Language { Code = "ar", Name = "Arabic" },
        new Language { Code = "hy", Name = "Armenian" },
        new Language { Code = "as", Name = "Assamese" },
        new Language { Code = "ay", Name = "Aymara" },
        new Language { Code = "az", Name = "Azerbaijani" },
        new Language { Code = "bm", Name = "Bambara" },
        new Language { Code = "eu", Name = "Basque" },
        new Language { Code = "be", Name = "Belarusian" },
        new Language { Code = "bn", Name = "Bengali" },
        new Language { Code = "bho", Name = "Bhojpuri" },
        new Language { Code = "bs", Name = "Bosnian" },
        new Language { Code = "bg", Name = "Bulgarian" },
        new Language { Code = "pt", Name = "Portuguese" },
        new Language { Code = "pa", Name = "Punjabi" },
        new Language { Code = "qu", Name = "Quechua" },
        new Language { Code = "ro", Name = "Romanian" },
        new Language { Code = "ru", Name = "Russian" },
        new Language { Code = "sm", Name = "Samoan" },
        new Language { Code = "sa", Name = "Sanskrit" },
        new Language { Code = "gd", Name = "Scots Gaelic" },
        new Language { Code = "nso", Name = "Sepedi" },
        new Language { Code = "sr", Name = "Serbian" },
        new Language { Code = "st", Name = "Sesotho" },
        new Language { Code = "sn", Name = "Shona" },
        new Language { Code = "sd", Name = "Sindhi" },
        new Language { Code = "si", Name = "Sinhala" },
        new Language { Code = "sk", Name = "Slovak" },
        new Language { Code = "sl", Name = "Slovenian" },
        new Language { Code = "so", Name = "Somali" },
        new Language { Code = "es", Name = "Spanish" },
        new Language { Code = "su", Name = "Sundanese" },
        new Language { Code = "sw", Name = "Swahili" },
        new Language { Code = "sv", Name = "Swedish" },
        new Language { Code = "tg", Name = "Tajik" },
        new Language { Code = "ta", Name = "Tamil" },
        new Language { Code = "tt", Name = "Tatar" },
        new Language { Code = "te", Name = "Telugu" },
        new Language { Code = "th", Name = "Thai" },
        new Language { Code = "ti", Name = "Tigrinya" },
        new Language { Code = "ts", Name = "Tsonga" },
        new Language { Code = "tr", Name = "Turkish" },
        new Language { Code = "tk", Name = "Turkmen" },
        new Language { Code = "tw", Name = "Twi" },
        new Language { Code = "uk", Name = "Ukrainian" },
        new Language { Code = "ur", Name = "Urdu" },
        new Language { Code = "ug", Name = "Uyghur" },
        new Language { Code = "uz", Name = "Uzbek" },
        new Language { Code = "vi", Name = "Vietnamese" },
        new Language { Code = "cy", Name = "Welsh" },
        new Language { Code = "xh", Name = "Xhosa" },
        new Language { Code = "yi", Name = "Yiddish" },
        new Language { Code = "yo", Name = "Yoruba" },
        new Language { Code = "zu", Name = "Zulu" },

    }.OrderBy(language => language.Name).ToList(); // Sort the languages by their names

    private List<Language> filteredLanguages;

    protected override void OnInitialized()
    {
        filteredLanguages = allLanguages;
    }

    private void FilterLanguages()
    {
        filteredLanguages = allLanguages
            .Where(l => l.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    // This method is called when the form is submitted and the input is valid
    private async Task HandleValidSubmit()
    {
        // Call the TranslateTextAsync method of the TranslateService
        // Pass the text to translate, "auto" for the source language, and the target language
        TranslationResult = await TranslateService.TranslateTextAsync(TranslationInput.TextToTranslate, "auto", TranslationInput.TargetLanguage);

        // Notify Blazor that the state has changed and the UI needs to be updated
        StateHasChanged();
    }

    
}

@if (!string.IsNullOrEmpty(ClearMessage))
{
    <div class="alert alert-info mt-3">
        @ClearMessage
    </div>
}

@code {

    private string ClearMessage { get; set; } = string.Empty;

    private async Task ClearResultsAsync()
    {
        TranslationInput.TextToTranslate = string.Empty;
        TranslationResult = string.Empty;

        if (string.IsNullOrEmpty(TranslationInput.TextToTranslate))
        {
            ClearMessage = "Result is already cleared";
            await Task.Delay(3000);
            ClearMessage = string.Empty;
            StateHasChanged();

        }

        TranslationResult = null;
        TranslationInput.TextToTranslate = null;
        StateHasChanged();
    }

  }
